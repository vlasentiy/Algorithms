package main

import algorithms.*
import java.util.*
import kotlin.jvm.JvmStatic

object Main {
    @JvmStatic
    fun main(args: Array<String>) {
//        twoSum()
//        reverseInteger()
//        palindrome()
//        romanToInt()
//        intToRoman()
//        longestCommonPrefix()
//        isValid()
//        mergeTwoLists()
//        removeDuplicatesFromSortedArray()
        removeElement()
    }

    // https://leetcode.com/problems/two-sum/
    private fun twoSum() {
        val twoSum = TwoSum()
        val result = twoSum.twoSum3(intArrayOf(2, 7, 11, 15, 17), 32)
        println("======")
        println("result: [${result.first()}; ${result.last()}]")

        //Log.d("vls", (3 % 10).toString())
    }

    private fun reverseInteger() {
        //2147483647
        //-2147483646
        val reverseInteger = ReverseInteger()
        val reverse = reverseInteger.reverse(
            1563847412
        )
        println(reverse.toString())

    }

    private fun palindrome() {
        val palindrome = Palindrome()
        val x = 1001
        println("$x: ${palindrome.isPalindrome(x)}")
    }

    private fun romanToInt() {
        val romanToInt = RomanToInt()
        val x = "IX"
        println("$x: ${romanToInt.romanToInt(x)}")
    }

    private fun intToRoman() {
        val intToRoman = IntToRoman()
        val x = 1108
        println("${x}: ${intToRoman.intToRoman(x)}")
    }

    private fun longestCommonPrefix() {
        val longestCommonPrefix = LongestCommonPrefix()
        //val list = arrayOf("flower", "flow", "flight")
        val list = arrayOf("alo", "alo", "alo")
        println("answer: ${longestCommonPrefix.longestCommonPrefix(list)}")
    }

    private fun isValid() {
        val isValid = IsValid()
        val str =
            "[([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([([()])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])])]"
        val time1 = Date()
        //val str = "(()("
        //val str = "[({(())}[()])]"
        //val str = "[{}]([([])])"
        println("str: ${isValid.isValid(str)}")
        val time2 = Date()
        println("interval: ${time2.time - time1.time}ms")
    }

    private fun mergeTwoLists() {
        val mergeTwoLists = MergeTwoSortedLists()
        val node1_7 = MergeTwoSortedLists.ListNode(7, null)
        val node1_4 = MergeTwoSortedLists.ListNode(4, node1_7)
        val node1_2 = MergeTwoSortedLists.ListNode(2, node1_4)
        val node1_1 = MergeTwoSortedLists.ListNode(1, node1_2)

        //val node2_7 = MergeTwoLists.ListNode(7, null)
        val node2_4 = MergeTwoSortedLists.ListNode(5, null)
        val node2_3 = MergeTwoSortedLists.ListNode(3, node2_4)
        val node2_1 = MergeTwoSortedLists.ListNode(0, node2_3)

        var result = mergeTwoLists.mergeTwoLists(node1_1, node2_1)
        //var result = node1_1
        /*while (result.next != null) {
            Log.d("mergeTwoLists", "${result.value}")
            result = result.next!!
            if (result.next == null) {
                Log.d("mergeTwoLists", "${result.value}")
            }
        }*/

    }

    private fun removeDuplicatesFromSortedArray() {
        val func = RemoveDuplicatesFromSortedArray()
        func.removeDuplicates(intArrayOf())
        func.removeDuplicates(intArrayOf(1))
        func.removeDuplicates(intArrayOf(1, 1))
        func.removeDuplicates(intArrayOf(1, 2))

        func.removeDuplicates(intArrayOf(1, 1, 1))
        func.removeDuplicates(intArrayOf(1, 1, 2))
        func.removeDuplicates(intArrayOf(1, 2, 2))
        func.removeDuplicates(intArrayOf(1, 2, 3))

        func.removeDuplicates(intArrayOf(1, 2, 2, 3))
        func.removeDuplicates(intArrayOf(1, 2, 2, 3, 3))
        func.removeDuplicates(intArrayOf(1, 2, 2, 3, 3, 4))
        func.removeDuplicates(intArrayOf(0, 0, 1, 1, 1, 2, 2, 3, 3, 4))

        func.removeDuplicates(intArrayOf(0, 0, 0, 0, 3))
    }

    private fun removeElement() {
        val func = RemoveElement()
        func.removeElement(intArrayOf(3, 2, 2, 3), 3)

        func.removeElement(intArrayOf(3, 2, 2, 4), 3)
        func.removeElement(intArrayOf(0, 1, 2, 2, 3, 0, 4, 2), 2)
        func.removeElement(intArrayOf(0, 0), 0)
        func.removeElement(intArrayOf(0, 0), 1)
        func.removeElement(intArrayOf(0), 0)
        func.removeElement(intArrayOf(0), 1)
        func.removeElement(intArrayOf(0, 0, 0), 0)
        func.removeElement(intArrayOf(0, 1, 1), 0)
        func.removeElement(intArrayOf(0, 0, 1), 0)
        func.removeElement(intArrayOf(3, 2, 1), 0)
        func.removeElement(intArrayOf(0, 2, 1), 0)
        func.removeElement(intArrayOf(0, 0, 1), 0)
        func.removeElement(intArrayOf(0, 0, 0, 1), 0)
        func.removeElement(intArrayOf(0, 0, 0, 1), 3)
    }
}